/* Основные операторы
   Для работы с переменными, со значениями, JavaScript поддерживает 
   все стандартные операторы, большинство которых есть и в других языках программирования.
   Несколько операторов мы знаем со школы – это обычные сложение +, 
   умножение *, вычитание и так далее.
   В этой главе мы сконцентрируемся на операторах, 
   которые в курсе математики не проходят, и на их особенностях в JavaScript.
*/

/*ОПЕРАНД – то, к чему применяется оператор. Например: 
  5 * 2 – оператор умножения с левым и правым операндами. 
  Другое название: «аргумент оператора». */

/*УНАРНЫМ называется оператор, который применяется к одному операнду. 
  Например, оператор унарный минус "-" меняет знак числа на противоположный: */
var x = 1;
x = -x;
alert(x); // -1, применили унарный минус

/*Бинарным называется оператор, который применяется к двум операндам. 
  Тот же минус существует и в бинарной форме: */
var x = 1,
    y = 3;
alert(y - x); // 2, бинарный минус

// ОПЕРАТОР СЛОЖЕНИЯ 
/* Обычно при помощи плюса '+' складывают числа.
   Но если бинарный оператор '+' применить к строкам, то он их объединяет в одну: */

var a = "моя" + "строка";
alert(a); // моястрока
var i = 1,
    k = 5;
console.log(i + k);
/* Если хотя бы один аргумент является строкой, то второй будет также преобразован к строке!
Причем не важно, справа или слева находится операнд-строка, в любом случае нестроковый аргумент 
будет преобразован. Например:
*/
alert('1' + 2); // "12"
alert(2 + '1'); // "21"
/*Это приведение к строке – особенность исключительно бинарного оператора "+".
Остальные арифметические операторы работают только с числами и всегда приводят аргументы к числу.
Например:*/
alert(2 - '1'); // 1
alert(6 / '2'); // 3
//Унарный, то есть применённый к одному значению, плюс ничего не делает с числами:
/* Как видно, плюс ничего не изменил в выражениях. Результат – такой же, как и без него.
Тем не менее, он широко применяется, так как его «побочный эффект» – преобразование значения в число.
Например, когда мы получаем значения из HTML-полей или от пользователя, то они обычно в форме строк.
А что, если их нужно, к примеру, сложить? Бинарный плюс сложит их как строки:
 */
var apples = "2";
var oranges = "3";
alert(apples + oranges); // "23", так как бинарный плюс складывает строки
//Поэтому используем унарный плюс, чтобы преобразовать к числу:
var apples = "2";
var oranges = "3";
alert(+apples + +oranges); // 5, число, оба операнда предварительно преобразованы в числа

//ПРИСВАИВАНИЕ(=)
var a = 5 - 4; //1. "=" - этооператор присваивания

//ВЗЯТИЕ ОСТАТКА(%)
//  Его результат a % b – это остаток от деления a на b.
alert(5 % 2); // 1, остаток от деления 5 на 2

//ИНРКЕМЕНТ/ДЕКРЕМЕНТ(++/--)
//  Инкремент/декремент можно применить только к переменной. Код 5++ даст ошибку.
//  Вызывать эти операторы можно не только после, но и перед 
//  переменной: i++ (называется «постфиксная форма») или ++i («префиксная форма»).
//  Обе эти формы записи делают одно и то же: увеличивают на 1.
//  Тем не менее, между ними существует разница.

/* Постфиксная форма i++ отличается от префиксной ++i тем, 
что возвращает старое значение, бывшее до увеличения.*/
var i = 1;
var a = i++; //a=1, i=2
a = ++i; //a=2, i=2

/* 
Побитовые операторы
Побитовые операторы рассматривают аргументы как 32-разрядные 
целые числа и работают на уровне их внутреннего двоичного представления.
Эти операторы не являются чем-то специфичным для JavaScript, 
они поддерживаются в большинстве языков программирования.
Поддерживаются следующие побитовые операторы:

AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> ) 
*/

//ОПЕРАТОР ЗАПЯТАЯ
/* 
Запятая позволяет перечислять выражения, разделяя их запятой ','. 
Каждое из них – вычисляется и отбрасывается, за исключением последнего, которое возвращается.
Обычно он используется в составе более сложных конструкций, 
чтобы сделать несколько действий в одной строке. Например:
*/
// три операции в одной строке
for (a = 1, b = 3, c = a * b; a < 10; a++) {
    //ur code
}